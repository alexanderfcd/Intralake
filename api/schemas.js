const { select } = require("async");
var mongoose = require("mongoose");
var Schema = mongoose.Schema;

module.exports = function () {
  return {
    userRegister: function () {
      var user = new Schema({
        type: {
          type: String,
          default: "user",
        },
        firstName: {
          type: String,
          default: function () {
            return "User";
          },
        },
        lastName: {
          type: String,
          default: function () {
            return new Date().getTime().toString(36);
          },
        },
        projects: [{ type: Schema.Types.ObjectId, ref: "project" }],
        roles: [{ type: Schema.Types.ObjectId, ref: "role" }],
        is: {
          // roles for global plugins
          type: Object,
          default: {
            admin: false,
            secretAdmin: false, // same as admin but has secret functions that are not visible to ther admins or superadmins
            superAdmin: false,
            editor: false,
            purchaser: false, // in case of e-commerce - user which can create orders without paying - e.g. ticket saler, phisical store clerk
            subscriber: true,
          },
        },
        email: { type: String, select: false },
        password: { type: String, select: false },
        token: { type: String, select: false }, // private - authenticate, changeable
        publicToken: String, // public - profile data, changeable
        constToken: String, // public url, NOT changeable
        date: {
          type: Date,
          default: Date.now,
        },
        data: {
          type: Object,
          default: {},
        },
        confirmed: {
          type: Boolean,
          default: false,
        },
        starredObjects: {
          type: [{ type: Schema.Types.ObjectId, ref: "object" }],
          default: [],
          select: false,
        },
        starredProjectObjects: {
          type: [
            {
              project: { type: Schema.Types.ObjectId, ref: "project" },
              objects: [{ type: Schema.Types.ObjectId, ref: "object" }],
            },
          ],
          default: [],
          select: false,
        },
        meta: String,
        image: String /* autogenerated name 97a8sd */,
        images: String /* autogenerated name 97a8sd */,
        payment: {
          type: Object,
          select: false,
          default: {
            planId: null,
            upgradedFromId: null,
            paymentDate: null,
            validUntil: null,
            meta: null,
          },
        },
        appTokens: {
          type: Number,
          default: 0,
        },
        lang: {
          type: String,
          default: "en",
        },
        currency: String,
        customFields: {},
      });
      mongoose.model("userRegister", user);
    },
    appTokensOrder: () => {
      const appTokensOrder = new Schema({
        date: {
          type: Date,
          default: Date.now,
        },
        data: {},
        dataSecret: {
          type: Object,
          select: false,
          default: {},
        },
        author: { type: Schema.Types.ObjectId, ref: "userRegister" },
        forUser: { type: Schema.Types.ObjectId, ref: "userRegister" }, // by default must same as 'author', later user may be able to buy tokens for other users
        type: {
          type: String,
          default: "appTokensOrder",
        },
        status: {
          type: String,
          default: "pending", // pending, paid, canceled
        },
        paymentMethod: String,
        appTokens: {
          type: Number,
          default: 0,
        },
        secret: {
          /// todo: giftcard
          type: String,
          default: null,
          select: false,
        },
      });
      mongoose.model("appTokensOrder", appTokensOrder);
    },

    // for tracking objects storage payment
    objectsStoragePayment: () => {
      const objectsStoragePayment = new Schema({
        data: {},
        toDate: {
          type: Date,
          default: Date.now,
        },
        currentOwner: { type: Schema.Types.ObjectId, ref: "userRegister" },
        projects: [{ type: Schema.Types.ObjectId, ref: "project" }],
      });
      mongoose.model("objectsStoragePayment", objectsStoragePayment);
    },

    // settings, counters etc.
    configRecords: () => {
      const configRecords = new Schema({
        data: {},
        type: String, // must be unique
      });
      mongoose.model("configRecords", configRecords);
    },
    comment: function () {
      var comment = new Schema({
        content: String,
        date: {
          type: Date,
          default: Date.now,
        },
        author: { type: Schema.Types.ObjectId, ref: "userRegister" },
        // todo:  parentComment : { type: Schema.Types.ObjectId, ref: 'comment' },
        // replies : { type: Number, default: 0 },
        ref: {
          type: String,
          default: "object",
        },
        post: { type: Schema.Types.ObjectId, refPath: "ref" },

        meta: String,
        type: {
          type: String,
          default: "comment",
        },
      });
      mongoose.model("comment", comment);
    },

    object: function () {
      var object = new Schema({
        name: String,
        date: {
          type: Date,
          default: Date.now,
        },
        dateCreated: {
          type: Date,
          default: Date.now,
        },
        versions: [{ type: Schema.Types.ObjectId, ref: "objectVersion" }],
        versionsLength: {
          type: Number,
          default: 0,
        },
        size: {
          type: Number,
          default: 0,
        },
        author: { type: Schema.Types.ObjectId, ref: "userRegister" },
        project: { type: Schema.Types.ObjectId, ref: "project", default: null },
        folder: {
          type: Schema.Types.ObjectId,
          ref: "object",
          default: null,
        },
        users: {
          // if specified only these yours can access it and owner and project admin
          type: [{ type: Schema.Types.ObjectId, ref: "userRegister" }],
          default: [],
        },
        accessGroups: {
          // if specified only yours in these groups  can access it and owner and project admin
          type: [{ type: Schema.Types.ObjectId, ref: "accessGroup" }],
          default: [],
        },
        meta: String,
        metaData: {
          type: {},
          default: {},
        },
        public: {
          type: Boolean,
          default: false,
        },
        deleted: {
          type: Boolean,
          default: false,
        },
        trashed: {
          type: Boolean,
          default: false,
        },

        tags: {
          type: Array,
          default: [],
        },
        mimeType: {
          // при ъпдейт на версията трябва да се променя
          type: String,
          default: "",
        },
        type: {
          type: String,
          default: "file",
        },
        subtype: {
          type: String,
          default: null,
        },
      });
      mongoose.model("object", object);
      object.index({
        name: "text",
      });
    },
    objectVersion: function () {
      var objectVersion = new Schema({
        key: {
          type: String,
          default: "",
        },
        etag: {
          type: String,
          default: "",
        },
        location: {
          type: String,
          default: "",
          select: false,
        },
        ckey: {
          type: String,
          default: "",
        },
        cetag: {
          type: String,
          default: "",
        },
        clocation: {
          type: String,
          default: "",
        },
        ctype: {
          type: String,
          default: "",
        },
        date: {
          type: Date,
          default: Date.now,
        },
        author: { type: Schema.Types.ObjectId, ref: "userRegister" },
        project: { type: Schema.Types.ObjectId, ref: "project" },
        object: { type: Schema.Types.ObjectId, ref: "object" },
        meta: {
          type: String,
          default: "",
        },
        type: String,
        mimeType: String,

        action: {
          /*

                    attached to object - create, rename, reupload,
                    not attached (used only for activity log) - copy, delete, multiDelete

                    * */
          type: String,
          default: "create",
        },
        size: {
          type: Number,
          default: 0,
        },
        name: String,
        previousName: String, // for rename -> used for activity tracking
      });
      mongoose.model("objectVersion", objectVersion);
    },
    category: function () {
      var category = new Schema({
        date: {
          type: Date,
          default: Date.now,
        },
        author: { type: Schema.Types.ObjectId, ref: "userRegister" },
        meta: {
          type: String,
          default: "",
        },
        objects: [],
      });
      mongoose.model("category", category);
    },
    order: function () {
      var order = new Schema({
        content: String,
        date: {
          type: Date,
          default: Date.now,
        },
        author: { type: Schema.Types.ObjectId, ref: "userRegister" },
        data: Object,
        meta: String,
      });
      mongoose.model("order", order);
    },
    project: function () {
      let project = new Schema({
        name: String,
        defaultView: {
          // todo: implement or remove -  on ui side - when defaultView is specified in project should be loaded instead of folder view
          type: String,
          default: "folder",
        },
        description: String,
        date: {
          type: Date,
          default: Date.now,
        },
        image: {
          type: String,
          default: null,
        },
        owner: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        creator: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        meta: String,
        bucket: String,
        bucketKey: String,
        databaseUrl: { type: String, select: false },
        roles: [{ type: Schema.Types.ObjectId, ref: "role" }],
        users: [{ type: Schema.Types.ObjectId, ref: "userRegister" }],
        type: {
          type: String,
          default: "project",
        },
        plugins: [{ type: Schema.Types.ObjectId, ref: "plugin" }],
        totalFiles: {
          type: Number,
          default: 0,
        },
        totalFolders: {
          type: Number,
          default: 0,
        },
        totalVersions: {
          type: Number,
          default: 0,
        },
        totalSize: {
          type: Number,
          default: 0,
        },
        secretData: {
          type: {},
          default: {},
          select: false,
        },
      });
      mongoose.model("project", project);
    },
    rolePermissionFields: {
      addUser: false,
      removeUser: false,

      createObject: false,
      deleteObject: false,
      modifyObject: false,
      previewObject: true,

      createRole: false,
      deleteRole: false,
      modifyRole: false,

      updateProject: false,
      canComment: false,
      monitorActivity: false,
    },
    tempInvitation: function () {
      var tempInvitation = new Schema({
        email: String,
        date: {
          type: Date,
          default: Date.now,
        },
        author: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        meta: String,
        project: { type: Schema.Types.ObjectId, ref: "project" },
        role: { type: Schema.Types.ObjectId, ref: "role" },
        type: {
          type: String,
          default: "invitation",
        },
      });
      mongoose.model("tempInvitation", tempInvitation);
    },
    role: function () {
      var role = new Schema({
        name: String,
        date: {
          type: Date,
          default: Date.now,
        },
        creator: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        owner: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        meta: String,
        project: { type: Schema.Types.ObjectId, ref: "project" },
        isAdmin: Boolean,
        users: [{ type: Schema.Types.ObjectId, ref: "userRegister" }],
        invitations: [{ type: Schema.Types.ObjectId, ref: "tempInvitation" }],
        can: {
          type: Object,
          default: this.rolePermissionFields,
        },
        type: {
          type: String,
          default: "role",
        },
      });
      mongoose.model("role", role);
    },
    accessGroup: function () {
      var accessGroup = new Schema({
        name: String,
        date: {
          type: Date,
          default: Date.now,
        },
        creator: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        meta: String,
        project: { type: Schema.Types.ObjectId, ref: "project" },
        users: [{ type: Schema.Types.ObjectId, ref: "userRegister" }],
        type: {
          type: String,
          default: "accessGroup",
        },
      });
      mongoose.model("accessGroup", accessGroup);
    },
    plugin: function () {
      var plugin = new Schema({
        name: String,
        slug: String, // folder name
        version: String,

        addedBy: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        meta: String,
        project: { type: Schema.Types.ObjectId, ref: "project" },
        type: {
          type: String,
          default: "plugin",
        },
      });
      mongoose.model("plugin", plugin);
    },
    // users can save configuration for modules like galleries grids table layouts etc.
    tplConfig: function () {
      var tplConfig = new Schema({
        date: {
          type: Date,
          default: Date.now,
        },
        addedBy: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        meta: String,
        type: {
          type: String,
          default: "tplConfig",
        },
        data: {},
      });
      mongoose.model("tplConfig", tplConfig);
    },
    // data stored in a single or multiple object related to: object, user etc
    // example: all likes for user for project
    relation: function () {
      var relation = new Schema({
        author: {
          type: Schema.Types.ObjectId,
          ref: "userRegister",
        },
        project: {
          type: Schema.Types.ObjectId,
          ref: "project",
          default: null,
        },
        meta: String,
        type: {
          type: String,
          default: "relation",
        },
        subType: {
          type: String,
          default: "relation",
        },
        dataArray: [],
        dataObject: {},
        dataString: String,
        objects: {
          type: [{ type: Schema.Types.ObjectId, ref: "object" }],
          default: [],
        },
      });
      mongoose.model("relation", relation);
    },
  };
};
